function [J, grad] = costFunction(theta, X, y)
%COSTFUNCTION Compute cost and gradient for logistic regression
%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the
%   parameter for logistic regression and the gradient of the cost
%   w.r.t. to the parameters.

% Initialize some useful values
m = length(y); % number of training examples

% You need to return the following variables correctly 
J = 0;
grad = zeros(size(theta));

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta
%
% Note: grad should have the same dimensions as theta
%

% Hypothesis function

z = X*theta;
hFunc = sigmoid(z);
cost1 = -(y.*log(hFunc));
cost0 = -((1-y).*log(1-hFunc));
J = sum(cost1 + cost0)/m;

gradFunc = (hFunc-y)'*X;
grad = tempGrad/m;

%{
% Caculate J
sum1 = 0;
for i=1:m
    tempz = X(i, :)*theta;
    tempg = sigmoid(tempz);
    temp1 = -(y(i)*log(tempg));
    temp0 = -((1-y(i))*log(1-tempg));  
    sum1 = sum1 + temp1 + temp0;  
end
J = sum1/m;

% Caculate grad
n = length(theta);
for j=1:n
  sumTemp = 0;
  for i=1:m
    tempz = X(i, :)*theta;
    tempg = sigmoid(tempz);
    sumTemp = sumTemp+(tempg-y(i))*X(i, j);
  end
  grad(j) = sumTemp/m;
end
%}

% =============================================================

end
